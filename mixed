#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define PORT 8888
#define SERVER_ADDR "127.0.0.1"
#define MAX_CLIENTS 2
#define NUM_PLAYERS 2
#define HAND_SIZE 7
#define DECK_SIZE 40

char *Color[4] = {"Red", "Yellow", "Green", "Blue"};
char *Value[16] = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "Cancel", "Skip", "Reverse", "Wild", "+2", "+4"};
char Deck[40][16];
char PlayerCard[7];

void init_deck() {
    int card_index = 0;
    for (int color_index = 0; color_index < 4; color_index++) {
        for (int value_index = 0; value_index < 16; value_index++) {
            sprintf(Deck[card_index], "%s %s", Color[color_index], Value[value_index]);
            card_index++;
        }
    }
}

void shuffle_deck(char deck[][16]) {
    srand(time(NULL));
    for (int i = 0; i < DECK_SIZE; i++) {
        int j = rand() % DECK_SIZE;
        char temp[16];
        strcpy(temp, deck[i]);
        strcpy(deck[i], deck[j]);
        strcpy(deck[j], temp);
    }
}

void deal_cards(char deck[][16], char players[][7][16]) {
    int card_index = 0;
    for (int i = 0; i < NUM_PLAYERS; i++) {
        for (int j = 0; j < HAND_SIZE; j++) {
            strcpy(players[i][j], deck[card_index]);
            card_index++;
        }
    }
}

void display_hand(char player_hand[][16]) {
    printf("Your hand: ");
    for (int i = 0; i < HAND_SIZE; i++) {
        printf("%s ", player_hand[i]);
    }
    printf("\n");
}

int main() {
    int server_fd, new_socket, client_sockets[MAX_CLIENTS] = {0};
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    
    // Create server socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    
    // Bind server socket to address
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    
    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }
    
    // Accept incoming connections
    for (int i = 0; i < MAX_CLIENTS; i++) {
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }
        client_sockets[i] = new_socket;
        printf("Client %d connected\n", i+1);
    }

    // Initialize deck
    init_deck();

    // Shuffle deck
    shuffle_deck(Deck);

    // Deal cards to players
    char players[NUM_PLAYERS][HAND_SIZE][16];
    deal_cards(Deck, players);

    // Display hands
    for (int i = 0; i < NUM_PLAYERS; i++) {
        printf("Player %d's hand: ", i + 1);
        display_hand(players[i]);
    }

    // Close all client sockets
    for (int i = 0; i < MAX_CLIENTS; i++) {
        close(client_sockets[i]);
    }

    return 0;
}
